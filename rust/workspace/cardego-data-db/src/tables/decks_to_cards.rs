//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "decks_to_cards")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub deck_id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub card_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cards::Entity",
        from = "Column::CardId",
        to = "super::cards::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Cards,
    #[sea_orm(
        belongs_to = "super::decks::Entity",
        from = "Column::DeckId",
        to = "super::decks::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Decks,
}

impl Related<super::cards::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cards.def()
    }
}

impl Related<super::decks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Decks.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
