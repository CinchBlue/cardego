//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "cardsets_to_cards")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub cardset_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub card_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cards::Entity",
        from = "Column::CardId",
        to = "super::cards::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Cards,
    #[sea_orm(
        belongs_to = "super::cardsets::Entity",
        from = "Column::CardsetId",
        to = "super::cardsets::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Cardsets,
}

impl Related<super::cards::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cards.def()
    }
}

impl Related<super::cardsets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cardsets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
