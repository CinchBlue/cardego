//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "cards")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub desc: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub image_url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl Related<super::attributes::Entity> for Entity {
    fn to() -> RelationDef {
        super::cards_to_attributes::Relation::Attributes.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::cards_to_attributes::Relation::Cards.def().rev())
    }
}

impl Related<super::cardsets::Entity> for Entity {
    fn to() -> RelationDef {
        super::cardsets_to_cards::Relation::Cardsets.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::cardsets_to_cards::Relation::Cards.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
